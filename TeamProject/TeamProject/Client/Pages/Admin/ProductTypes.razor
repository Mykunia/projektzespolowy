@page "/admin/product-types"
@using Microsoft.AspNetCore.Authorization;
@using TeamProject.Client.Services.ProductTypeService;
@using TeamProject.Shared.Models;
@inject IProductTypeService ProductTypeService
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<h3 class="m-2">Product Types</h3>
@foreach (var productType in ProductTypeService.ProductTypes)
{
    @if (productType.Edit)
    {
        <EditForm Model="editingProductType" OnSubmit="UpdateProductType">
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="editingProductType.Name" class="form-control"></InputText>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <img src="./check.png" class="upload-image" />
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <div class="col">
                @productType.Name
            </div>
            <div class="col">
                <button class="btn btn-primary" @onclick="@(() => EditProductType(productType))">
                    <img src="./pencil.png" class="edit-image" />
                </button>
                <button class="btn btn-danger" @onclick="@(() => DeleteProductType(productType.Id))">
                    <img src="./cancel.png" class="cancel-image" />
                </button>
            </div>
        </div>
    }
}
<button class="btn btn-primary m-2" @onclick="CreateNewProductType">
    <i class="oi oi-plus"></i> Add new product type
</button>

@code {
    ProductType editingProductType = null;

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        ProductTypeService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductTypeService.OnChange -= StateHasChanged;
    }

    private void EditProductType(ProductType productType)
    {
        productType.Edit = true;
        editingProductType = productType;
    }

    private void CreateNewProductType()
    {
        editingProductType = ProductTypeService.CreateNewProductType();
    }

    private async Task UpdateProductType()
    {
        if (editingProductType.New)
            await ProductTypeService.AddProductType(editingProductType);
        else
            await ProductTypeService.UpdateProductType(editingProductType);
        editingProductType = new ProductType();
    }

    private async Task DeleteProductType(int productTypeId)
    {
        await ProductTypeService.DeleteProductType(productTypeId);
    }
}