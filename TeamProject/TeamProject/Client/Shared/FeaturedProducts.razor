@using TeamProject.Client.Services.ProductService;
@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <div class="container">
        <div class="product-tiles">
        @foreach (var product in ProductService.Products)
        {
            @if (product.Featured)
            {
                <div class="product-tile">
                    <div class="tile-image">
                        <a href="product/@product.Id">
                            @if (!string.IsNullOrEmpty(product.PictureUrl))
                            {
                                <img src="@product.PictureUrl" alt="@product.Name">
                            }
                            else if (product.Pictures.Count > 0)
                            {
                                <img src="@product.Pictures[0].Data" alt="@product.Name">
                            }
                        </a>
                    </div>
                    <div class="product-details">
                    <h4><a href="product/@product.Id">@product.Name</a></h4>
                    @if (product.Variants != null && product.Variants.Count > 0)
                    {
                        <h5 class="price">
                            $@product.Variants[0].Price
                        </h5>
                    }
                    </div>
                </div>
            }
        }
        </div>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
}
